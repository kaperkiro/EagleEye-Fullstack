import { useState, useEffect, useRef } from "react";
import { FloorPlanStaticObjects } from "./AlarmObj.tsx";
import alarmSound from "../assets/alarmSound.wav";
import "../css/Alarms.css";

// A simple point in percentage relative to the floor plan.
type Point = {
  x: number;
  y: number;
};

// Updated AlarmZone with a unique ID generated by the backend.
type AlarmZone = {
  id: string;
  topLeft: Point;
  bottomRight: Point;
  active: boolean;
  triggered: boolean;
};

// Set this to match your backend host and port.
const BACKEND_URL = "http://localhost:5001";

export const LarmData = () => {
  // Mode control: 0 - Add Zone, 1 - Remove Zone, 2 - Zone Status
  const [activeIndexLB, setActiveIndex] = useState(0);
  // The starting point for a new zone.
  const [zoneStart, setZoneStart] = useState<Point | null>(null);
  // A draft zone drawn while moving the mouse. Note: Excludes the id.
  const [draftZone, setDraftZone] = useState<Omit<AlarmZone, "id"> | null>(
    null
  );
  // List of finalized alarm zones that include their ID.
  const [alarms, setAlarms] = useState<AlarmZone[]>([]);
  // Track saving state for loading message
  const [isLoading, setIsLoading] = useState(false);
  // Track initial fetch loading
  const [isInitialLoading, setIsInitialLoading] = useState(true);
  // Control fetch interval (500ms when alarms exist, 5000ms when none)
  const [fetchInterval, setFetchInterval] = useState(500);

  // Audio ref for alarm sound
  const audioRef = useRef<HTMLAudioElement>(null);

  // Fetch existing alarm zones from the backend when the component mounts.
  useEffect(() => {
    /*
     *Fetches existing alarms from backend
     */
    const initialFetch = async () => {
      try {
        await fetchAlarms();
      } catch (err) {
        console.error("Initial fetch error:", err);
      } finally {
        setIsInitialLoading(false);
      }
    };

    initialFetch();

    const intervalId = setInterval(fetchAlarms, fetchInterval);
    return () => clearInterval(intervalId);
  }, [fetchInterval]); // Re-run when fetchInterval changes

  // Play alarm sound when any zone is triggered
  useEffect(() => {
    const anyTriggered = alarms.some((zone) => zone.triggered);
    const audio = audioRef.current;
    if (audio) {
      if (anyTriggered) {
        audio.play().catch((e) => console.warn("Audio play failed:", e));
      } else {
        audio.pause();
        audio.currentTime = 0;
      }
    }
  }, [alarms]);

  const fetchAlarms = async () => {
    /*
     * Fetches alarma data
     */
    try {
      const res = await fetch(`${BACKEND_URL}/api/alarms`);
      if (!res.ok) {
        throw new Error("Failed to fetch alarms from backend");
      }
      const data = await res.json();
      if (data.alarms) {
        setAlarms((prev) => {
          const optimisticAlarms = prev.filter((alarm) =>
            alarm.id.startsWith("temp-")
          );
          const backendAlarms = data.alarms;
          setFetchInterval(backendAlarms.length > 0 ? 500 : 5000);
          if (backendAlarms.length > 0) {
            console.log("Fetched alarms:", backendAlarms);
          } else {
            console.log("No alarms found, slowing fetch interval to 5000ms");
          }
          return [...backendAlarms, ...optimisticAlarms];
        });
      }
    } catch (err) {
      console.error("Error fetching alarms:", err);
    }
  };

  /**
   * Handles clicks on map. Used for alarm functions.
   *
   * @param index
   */
  const handleButtonClick = (index: number) => {
    setActiveIndex(index);
    if (index !== 0) {
      setZoneStart(null);
      setDraftZone(null);
    }
  };

  /**
   * Calculates the zone of an alarm
   *
   * @param p1
   * @param p2
   * @returns
   */
  const calculateAlarmZone = (p1: Point, p2: Point): Omit<AlarmZone, "id"> => {
    const topLeft = { x: Math.min(p1.x, p2.x), y: Math.min(p1.y, p2.y) };
    const bottomRight = { x: Math.max(p1.x, p2.x), y: Math.max(p1.y, p2.y) };
    return { topLeft, bottomRight, active: true, triggered: false };
  };

  /**
   * Changes the status fÃ¶r alarm
   * @param id
   */
  const changeAlarmStatus = (id: string) => {
    setIsLoading(true);
    fetch(`${BACKEND_URL}/api/alarms/status/${id}`, {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
    })
      .then((response) => {
        if (!response.ok) throw new Error("Failed to update alarm");
        return response.json();
      })
      .then((result) => {
        console.log("Backend response:", result);
        setAlarms((prev) =>
          prev.map((alarm) =>
            alarm.id === id ? { ...alarm, active: !alarm.active } : alarm
          )
        );
      })
      .catch((err) => console.error("Error updating alarm:", err))
      .finally(() => setIsLoading(false));
  };

  const saveAlarmZone = (newAlarm: Omit<AlarmZone, "id">) => {
    const tempId = `temp-${Date.now()}`;
    const optimisticAlarm: AlarmZone = { ...newAlarm, id: tempId };
    setAlarms((prev) => [...prev, optimisticAlarm]);

    setIsLoading(true);

    fetch(`${BACKEND_URL}/api/alarms`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(newAlarm),
    })
      .then((response) => {
        if (!response.ok) {
          setAlarms((prev) => prev.filter((alarm) => alarm.id !== tempId));
          throw new Error("Failed to save alarm zone");
        }
        return response.json();
      })
      .then((data) => {
        if (data.alarm) {
          setAlarms((prev) =>
            prev.map((alarm) => (alarm.id === tempId ? data.alarm : alarm))
          );
          console.log("Saved new alarm zone:", data.alarm);
        }
      })
      .catch((err) => {
        console.error("Error saving alarm zone:", err);
        setAlarms((prev) => prev.filter((alarm) => alarm.id !== tempId));
      })
      .finally(() => {
        setIsLoading(false);
      });
  };

  /**
   * Handles removing of an alarm
   * @param id
   */
  const handleRemoveZone = (id: string) => {
    setIsLoading(true);
    fetch(`${BACKEND_URL}/api/alarms/${id}`, { method: "DELETE" })
      .then((response) => {
        if (!response.ok) throw new Error("Failed to remove alarm zone");
        return response.json();
      })
      .then(() => {
        setAlarms((prev) => prev.filter((alarm) => alarm.id !== id));
        console.log("Removed alarm zone with id:", id);
      })
      .catch((err) => console.error("Error removing alarm zone:", err))
      .finally(() => setIsLoading(false));
  };

  /**
   *  Handle click on the floor plan to start or complete drawing a zone.
   * @param e
   */
  const handleMouseClick = (
    e: React.MouseEvent<HTMLDivElement, MouseEvent>
  ) => {
    if (activeIndexLB !== 0) return;
    const rect = e.currentTarget.getBoundingClientRect();
    const x = ((e.clientX - rect.left) / rect.width) * 100;
    const y = ((e.clientY - rect.top) / rect.height) * 100;
    const point = { x, y };

    if (!zoneStart) {
      setZoneStart(point);
    } else {
      const zone = calculateAlarmZone(zoneStart, point);
      saveAlarmZone(zone);
      setZoneStart(null);
      setDraftZone(null);
    }
  };

  /**
   * Handle mouse movement to update draft zone dimensions while drawing.
   */
  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {
    if (activeIndexLB !== 0 || !zoneStart) return;
    const rect = e.currentTarget.getBoundingClientRect();
    const point = {
      x: ((e.clientX - rect.left) / rect.width) * 100,
      y: ((e.clientY - rect.top) / rect.height) * 100,
    };
    setDraftZone(calculateAlarmZone(zoneStart, point));
  };

  /**
   * Handle right-click (context menu) to cancel drawing mode.
   */

  const handleContextMenu = (e: React.MouseEvent<HTMLDivElement>) => {
    if (activeIndexLB === 0 && zoneStart) {
      e.preventDefault();
      setZoneStart(null);
      setDraftZone(null);
    }
  };

  return (
    <div className="alarmsDiv">
      <audio ref={audioRef} src={alarmSound} loop preload="auto" />

      <div className="alarmLeftSidebar">
        <h1>Alarm Control</h1>
        <button
          className={`alarmButton ${activeIndexLB === 0 ? "active" : ""}`}
          onClick={() => handleButtonClick(0)}
        >
          Add Zone
        </button>
        <button
          className={`alarmButton ${activeIndexLB === 1 ? "active" : ""}`}
          onClick={() => handleButtonClick(1)}
        >
          Remove Zone
        </button>
        <button
          className={`alarmButton ${activeIndexLB === 2 ? "active" : ""}`}
          onClick={() => handleButtonClick(2)}
        >
          Zone Status
        </button>
      </div>

      <div className="mapDiv">
        <div
          className="mapDiv2"
          style={{ position: "relative" }}
          onClick={handleMouseClick}
          onMouseMove={handleMouseMove}
          onContextMenu={handleContextMenu}
        >
          <FloorPlanStaticObjects />

          {/* Initial loading indicator */}
          {isInitialLoading && (
            <div
              style={{
                position: "absolute",
                top: "50%",
                left: "50%",
                transform: "translate(-50%, -50%)",
                backgroundColor: "rgba(0, 0, 0, 0.7)",
                color: "white",
                padding: "10px 20px",
                borderRadius: "5px",
                zIndex: 10,
              }}
            >
              Loading Alarms...
            </div>
          )}

          {/* Saving/deleting loading indicator */}
          {isLoading && (
            <div
              style={{
                position: "absolute",
                top: "50%",
                left: "50%",
                transform: "translate(-50%, -50%)",
                backgroundColor: "rgba(0, 0, 0, 0.7)",
                color: "white",
                padding: "10px 20px",
                borderRadius: "5px",
                zIndex: 10,
              }}
            >
              Loading...
            </div>
          )}

          {draftZone && (
            <div
              style={{
                position: "absolute",
                left: `${draftZone.topLeft.x}%`,
                top: `${draftZone.topLeft.y}%`,
                width: `${draftZone.bottomRight.x - draftZone.topLeft.x}%`,
                height: `${draftZone.bottomRight.y - draftZone.topLeft.y}%`,
                backgroundColor: "rgba(144,238,144,0.5)",
                pointerEvents: "none",
                border: "2px dashed green",
              }}
            />
          )}

          {alarms.map((zone) => (
            <div
              key={zone.id}
              onClick={
                activeIndexLB === 1 || activeIndexLB === 2
                  ? (e) => {
                      e.stopPropagation();
                      activeIndexLB === 1
                        ? handleRemoveZone(zone.id)
                        : changeAlarmStatus(zone.id);
                    }
                  : undefined
              }
              className={`alarmZone ${
                zone.id.startsWith("temp-") ? "temp" : ""
              } ${
                zone.triggered
                  ? "blinking"
                  : zone.active
                  ? "active"
                  : "inactive"
              }`}
              style={{
                left: `${zone.topLeft.x}%`,
                top: `${zone.topLeft.y}%`,
                width: `${zone.bottomRight.x - zone.topLeft.x}%`,
                height: `${zone.bottomRight.y - zone.topLeft.y}%`,
                position: "absolute",
              }}
            >
              <span
                style={{
                  color: !zone.active
                    ? "gray"
                    : zone.triggered
                    ? "red"
                    : "green",
                  fontWeight: "bold",
                  position: "absolute",
                  top: "50%",
                  left: "50%",
                  transform: "translate(-50%, -50%)",
                }}
              >
                {!zone.active
                  ? "Inactive"
                  : zone.triggered
                  ? "Triggered"
                  : "Active"}
              </span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default LarmData;
